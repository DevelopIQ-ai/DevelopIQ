
#     <Step_3> From the table of contents, find the sections that cover the following topics. There shouldn't be more than 7-10 relevant sections. {section_finding_hint} </Step_3>
#     <Step_5> Verify that the section has information such as the listed here -> {verification_hint}. If none of the sections provide any relevant information, return NULL. </Step_5>
find_and_extract_sections:
  description: >
    <GOAL>
    Examine the provided JSON structure representing a list of titles, labeled as "title_list".
    The user is looking for information about: "{topic}".
    </GOAL>

    <STEPS>
    <Step_1> Determine which title in the list is most relevant to finding information about "{topic}" with respect to the zone code: "{zone_code}". Here is some additional information to help you: {title_finding_hint} </Step_1>
    <Step_2> Extract the detailed table of contents for the title you have chosen. You can use the table_of_contents_extractor_tool to do this. </Step_2>
    <Step_3> For each of the following sub-topics, find all of the most relevant sections based on the table of contents. If you cannot find any relevant sections, return an empty array for that sub-topic. Do NOT miss any subtopics. <SUB-TOPICS> {section_finding_hint} </SUB-TOPICS>
    </STEPS>

    <JSON_STRUCTURE>
    List of titles:
    {title_list}
    </JSON_STRUCTURE>

    <HTML DOCUMENT ID>
    HTML document ID:
    {html_document_id}
    </HTML DOCUMENT ID>

  expected_output: >
    Return a JSON array of the sections you have extracted, ordered by relevance, including both the section 
    metadata and the complete extracted content.
    The output must follow this exact format:
    {topic} = [
      {
        "sub-topic": "The sub-topic you are looking for",
        "section_number": an array of section numbers,
        "section_title": an array of section titles,
        "relevance_score": an array of relevance scores from 1-10,
        "reason": an array of reasons for the relevance score,
      }
    ]
  agent: municipal_code_section_extractor


# analyze_extracted_sections:
#   description: >
#     <GOAL>
#     Analyze the extracted sections and answer the user's query. The user wants information about: "{topic}".
#     </GOAL>

#     <STEPS>
#     Step 1: First, refer to the extracted sections. The user's query is: "{topic}" with respect to the zone code: "{zone_code}". 
#     Step 2: Refer to the additional information provided about answering the user's query, which you will find in the "additional_information" field. This is key in understanding how to answer the query.
#     Step 3: Answer the user's query based on the extracted sections and the additional information.
#     </STEPS>

#     <ADDITIONAL INFORMATION>
#     Additional information:
#     {additional_information}
#     </ADDITIONAL INFORMATION>

#   expected_output: >
#     {expected_output}
#   agent: municipal_code_section_analyst
#   context: [find_and_extract_sections]


    
    
