#!/usr/bin/env python3
"""
Download BLS reference code tables, dump each to a big markdown file,
and create a separate markdown summary with row counts.

Run:
    python fetch_bls_codes.py
"""

from pathlib import Path
import requests
import textwrap

FILES = {
    # Current Employment Statistics (CE)
    "CE ‑ Seasonal Adjustment Codes": "https://download.bls.gov/pub/time.series/ce/ce.seasonal",
    "CE ‑ Super Sector Codes":       "https://download.bls.gov/pub/time.series/ce/ce.supersector",
    "CE ‑ Industry Codes":           "https://download.bls.gov/pub/time.series/ce/ce.industry",
    "CE ‑ Data Type Codes":          "https://download.bls.gov/pub/time.series/ce/ce.datatype",
    # State & Metro (SM)
    "SM ‑ State Codes":              "https://download.bls.gov/pub/time.series/sm/sm.state",
    "SM ‑ Area Codes":               "https://download.bls.gov/pub/time.series/sm/sm.area",
    "SM ‑ Super Sector Codes":       "https://download.bls.gov/pub/time.series/sm/sm.supersector",
    "SM ‑ Industry Codes":           "https://download.bls.gov/pub/time.series/sm/sm.industry",
    "SM ‑ Data Type Codes":          "https://download.bls.gov/pub/time.series/sm/sm.data_type",
    # Business Dynamics (BD)
    "BD ‑ Area":                     "https://download.bls.gov/pub/time.series/bd/bd.state",
    "BD ‑ Industry":                 "https://download.bls.gov/pub/time.series/bd/bd.industry",
    "BD ‑ Data Element":             "https://download.bls.gov/pub/time.series/bd/bd.dataelement",
    "BD ‑ Data Class":               "https://download.bls.gov/pub/time.series/bd/bd.dataclass",
    "BD ‑ Rate/Level":               "https://download.bls.gov/pub/time.series/bd/bd.ratelevel",
    # Local Area Unemployment (LA)
    "LA ‑ Area Type Code":           "https://download.bls.gov/pub/time.series/la/la.area_type",
    "LA ‑ Area Codes":               "https://download.bls.gov/pub/time.series/la/la.area",
    "LA ‑ Measure Codes":            "https://download.bls.gov/pub/time.series/la/la.measure",
    # Job Openings & Labor Turnover (JT)
    "JT ‑ Industry":                 "https://download.bls.gov/pub/time.series/jt/jt.industry",
    "JT ‑ State":                    "https://download.bls.gov/pub/time.series/jt/jt.state",
    "JT ‑ Area":                     "https://download.bls.gov/pub/time.series/jt/jt.area",
    "JT ‑ Size Class":               "https://download.bls.gov/pub/time.series/jt/jt.sizeclass",
    "JT ‑ Data Element Codes":       "https://download.bls.gov/pub/time.series/jt/jt.dataelement",
    "JT ‑ Rate/Level Codes":         "https://download.bls.gov/pub/time.series/jt/jt.ratelevel",
}

# Output files
TABLES_MD  = Path("bls_code_tables.md")
COUNTS_MD  = Path("bls_code_counts.md")

HEADERS = {
    "User-Agent": (
        "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) "
        "AppleWebKit/537.36 (KHTML, like Gecko) "
        "Chrome/124.0 Safari/537.36"
    ),
    "Accept": "*/*",
}

def fetch(url: str) -> str:
    resp = requests.get(url, headers=HEADERS, timeout=30)
    resp.raise_for_status()
    return resp.text.rstrip("\n")  # cleaner markdown

def count_records(text: str) -> int:
    """Count non‑blank lines minus one header row (if present)."""
    lines = [ln for ln in text.splitlines() if ln.strip()]
    return max(len(lines) - 1, 0)  # guard against empty files
def main() -> None:
    # 1️⃣  Write the headings (overwrite if the files already exist)
    TABLES_MD.write_text(
        "# BLS Reference Code Tables\n\n"
        "> Generated by `fetch_bls_codes.py`. Each section shows the raw file exactly as published by BLS.\n\n",
        encoding="utf-8",
    )
    COUNTS_MD.write_text(
        "# BLS Code Table Row Counts\n\n"
        "| Table | Records |\n|-------|---------|\n",
        encoding="utf-8",
    )

    # 2️⃣  Append each table and its row‑count
    for label, url in FILES.items():
        print(f"→ Fetching {label} …")
        raw = fetch(url)

        # --- append the raw table ---
        with TABLES_MD.open("a", encoding="utf-8") as md:
            md.write(textwrap.dedent(f"""
            ## {label}
            Source: <{url}>

            ```text
            {raw}
            ```
            """))

        # --- append the count line ---
        with COUNTS_MD.open("a", encoding="utf-8") as cnt:
            cnt.write(f"| {label} | {count_records(raw):,} |\n")

    print(f"\n✅ Done!  • {TABLES_MD}  • {COUNTS_MD}")
if __name__ == "__main__":
    main()